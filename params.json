{
  "name": "Wiki Search Engine",
  "tagline": "A Search Engine Wiki Dump ",
  "body": "____________________________________________________________________________________________________________________________________________\r\nKalpish Singhal\r\n____________________________________________________________________________________________________________________________________________\r\n==============================================================================================================================\r\n\t           Indexing mechanism for search egine \r\n==============================================================================================================================\r\n\r\n-> The code basically implement INDEX CREATION MODULE for seach engin \r\n\r\n-> It reads the content of XML File and SAX Parser passes it\r\n\r\n-> Character by character it scans the text and extracts words for indexing\r\n\r\n-> sorted posting list on term frequency\r\n\r\n-> Amended every word with D.F in indexing \r\n\r\n==============================================================================================================================\r\n\t           Files LIST With One Line Disciption\r\n==============================================================================================================================\r\n\r\n(i)  Driver.java //contains main function takes Xml \"wiki dump\" as comandline input and calls Handller_pars for handling \r\n\r\n(ii) Handller_pars.java //contains parsing handling mechanism to remove scrap and send words for parsing into map\r\n\r\n(iii)help_parsing.java //helps in parsing the content removing stop words stemming it using Stemmer.java\r\n\r\n(iv) Stemmer.java //stemm the word to its root form and return it to the calling function \r\n\r\n(iv) Writeing_to_file.java //it writes o/p to the given comaand line input filr if file not exist it will create new file \r\n\r\n(v)  listing.java //Class defination for using ojects to keep count to be maped into the map \r\n\r\nvi) merge_index.java //this merges the complete index files created by writing the file\r\n\r\nVii) post_index_processing.java //This processes the merged index to built sorted index with DF of each term \r\n\r\nviii) Driver_title.java //This is main class to extract title corrsponding to the document id and save to file#this can be merged with \r\ndriver.java but title document number mapping where not initially part of the statement project\r\n\r\nix) Map_title.java//this writes title to the file with wiki_doc_id\r\n\r\nX) title_id_processor.java //processes the titel built above to make secondary and tertiary title_index\r\n\r\nxi)Query_processor.java //used for proceesing user quries to give the  desired document \r\n\r\n\r\n==============================================================================================================================\r\n\t            Implemented characteristics\r\n==============================================================================================================================\r\n\r\n\r\n-> Used tree Hash map for SortedMap order of the keys will be sorted. so sorted according to word A-Z\r\n\r\n-> Not storing zeros in index file. helps in reducing \r\n\r\n-> One go parssing :- data is parsed in one go to reduce time \r\n\r\n-> Stop words are removed to make index efficent except from title in the view for seacrch of titles like \"to be not to be\" type query \r\n\r\n-> infobox is parsed to get relevent data.\r\n\r\n->Query time: <=1sec per query Query can be single word (Sachin) or multi-word(Sachin Tendulkar India) or fielded query(t:sachin b:india), \r\nwhere t=title,b=body,c=category,e:external links,i:info-box\r\n\r\n==============================================================================================================================\r\n\t            Output Format\r\n==============================================================================================================================\r\n\r\n\r\n\r\n#Index file\r\n\r\n-> word-<df>?doc_id:<title count>,<category count>,<infobox count>,<body count>,<external link count>;....;\r\n\r\neg:-ledzi-1?6256:,,,1,; it represnt ledzi is in document 6256 1 time in body .\r\n\r\n#Query processor\r\n\r\na) enter the number of quarries you want to process:<eg:-2>\r\n\r\nb) enter your query:<enter user query>\r\n\r\nc) Time taken in Result Generation: ...milisec\r\n\r\n# Assumption\r\n\r\n\ti) xml-wiki dump #present in parent directory of code directory\r\n\r\n\r\n\t\r\n\tii) output folders should be present in parent directory\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}